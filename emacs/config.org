
*  Settings
** General

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq inhibit-startup-screen t)
  (setq scroll-conservatively 100)
  (setq make-backup-file nil)
  (setq auto-save-default nil)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  ;; kill all buffers except for current 
  (defun kill-all-other-buffer ()
    (interactive)
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

  ;; reload config
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
#+END_SRC

** Melpa
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
  (use-package tron-legacy-theme
  :config
  (load-theme 'tron-legacy t))
#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init (which-key-mode))
#+END_SRC

** ido mode and buffers

#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
  (global-set-key (kbd "C-x b") 'ibuffer)
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
  (setq ibuffer-expert t)
#+END_SRC
** Nov

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+END_SRC

** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
  :ensure t
  :bind
  ("M-s" . avy-goto-char))
#+END_SRC

** switch-window
#+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :ensure t
      :config
      (setq aw-background nil)
      (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
    (global-set-key (kbd "M-o") 'ace-window)
#+END_SRC

** ivy
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-s" 'swiper)
  (ivy-mode)
#+END_SRC

** org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (setq org-ellipsis " ▾")
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-directory "~/org")
    (setq org-agenda-files '("tasks/birth.org" "tasks/tasks.org" "roadmap/roadmap.org" "roadmap/math.org" "roadmap/comp.org" "roadmap/hardware.org"))
    (setq org-refile-targets
	  '(("archive.org" :maxlevel . 1)))
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-todo-keywords
	  '((sequence "TODO(t)" "NEXT(n)" "ROUTINE(r)" "|" "DONE(d!)")))
  (add-to-list 'org-structure-template-alist '("em" . "src emacs-lisp")))

#+END_SRC

** org-bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** elfeed
#+begin_src emacs-lisp
(setq rmh-elfeed-org-files (list "~/org/elfeed.org"))
#+end_src

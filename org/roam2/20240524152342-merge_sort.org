:PROPERTIES:
:ID:       2139a7ae-1674-416b-ba40-186fef57959a
:END:
#+title: merge sort

* Definition

Merge sort is a sorting algorithm based on the divide and conquer technique. It divides the problem into $n$ subproblems with same solution. The advantage of this technique is that the algorithm can sort an array recursively and take less time due to lower complexity time: $\Theta(n \lg n)$, making the merge sort a very optimized and efficient algorithm.

* Example

#+BEGIN_SRC c
#include <stdio.h>
#include <stdlib.h>
#include "head.h"

int merge(int *array, int p, int q, int r) {
    int size_L = q - p + 1, size_R = r - q;
  int *L = (int *)malloc(size_L*sizeof(int));
  int *R = (int *)malloc(size_R*sizeof(int));

  for (int i = 0;i<size_L;i++)
    L[i] = array[p + i];
  for (int i = 0;i<size_R;i++)
    R[i] = array[q + i + 1];

  int i = 0;
  int j = 0;
  int k = p;
  while (i < size_L && j < size_R) {
    if (L[i] <= R[j]) {
      array[k] = L[i];
      i++;
    }
    else {
      array[k] = R[j];
      j++;
    }
    k++;
  }

  while (i < size_L) {
   array[k] = L[i];
    i++;
    k++;
  }
  while (j < size_R) {
    array[k] = R[j];
    j++;
    k++;
  }
  
  free(L);
  free(R);
  return 0;
}

int merge_sort(int *array, int p, int r) {
  if (p >= r)
    return 0;
  int q = (p + r)/2;
  merge_sort(array, p, q);
  merge_sort(array, q+1, r);
  merge(array, p, q, r);
  return 0;
}

int main() {
  FILE *fd;
  int *array;
  int size_file = 0;
  fd = open_array(&size_file, (void **)(&array));
  if (fd == NULL)
    return -1;

  int size = size_file / sizeof(int);

  merge_sort(array, 0, size - 1);

  free(array);
  fclose(fd);
}

#+END_SRC

An integer array is opened from a file and saved into the array pointer, then merge_sort is called and it recursively (calls itself until p >= r) sort and merge the subarrays.

* Keywords

[[id:d7c5ac72-4f7f-404c-8f7e-d22ee3a12ecc][Recurrence]], [[id:a9e7d9c1-80c3-4f21-b24a-51005c7c0bf2][divide and conquer algorithms]]

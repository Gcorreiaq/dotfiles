:PROPERTIES:
:ID:       61c0a748-39ee-49de-881b-e86769397f57
:END:
#+title: heapsort

Heapsort is another algorithm for sorting an array, it depends on a data structure called [[id:9a085d65-d3d8-4d6c-b849-1593f231173c][Heaps]] (in this case *max-heaps*), taking the root node value (since it is the largest element) and maintaining the heap property.

Since it uses heaps, heapsort is *in-place*, which means there is no need to allocate memory to sort the array, the operation can be done in the array itself (take merge sort as an opposite). Its complexity time is $O(n \log n)$.

* Heaps
:PROPERTIES:
:ID:       9a085d65-d3d8-4d6c-b849-1593f231173c
:END:

Heaps are arrays in which the elements of such array are arranged in a way that follow rules similar to binary trees.

The first element A[0] is the root of tehe tree, and the left node and right node can be found by its index (in this case i = 0). Therefore heaps are index controlled:

#+DOWNLOADED: screenshot @ 2024-07-16 21:45:14
[[file:Heaps/2024-07-16_21-45-14_screenshot.png]]

#+begin_src C
  // i = index of element
  parent(i) {
    return i / 2;
  }
  left_node(i) {
    return 2 * i;
  }
  right_node(i) {
    return (2 * i) + 1;
  }
#+end_src

To build a heap, create an algorithm that will use ~max_heapify~ from the last subtree $i = n/2$ down to $1$ (root element):

#+begin_src C
  int build_heap(heap A) {
    for (int i = (A.size / 2) - 1;i >= 0;i--)
      max_heapify(A, i);
  }
#+end_src

** Max-heaps and min-heaps

Max-heaps grow in a decreasing order, and the root element A[0] is the maximum value of the array.

Min-heaps grow in a increasing order, and the root element A[0] is the minimum value of the array.


** Maintaining the heap property

Whenever an element is removed or exchanged from the array, the array needs to be "fixed" to maintain the max-heap or min-heap property.

An algorithm for this task needs to run recursively because fixing a subtree (exchanging the root A[i] of current subarray with one of the child nodes) can break the heap property of the subtree where the child node exchanged is the root:

#+DOWNLOADED: screenshot @ 2024-07-16 21:59:28
[[file:Heaps/2024-07-16_21-59-28_screenshot.png]]

#+begin_src C
  int max_heapify(heap A, int i) {
    int *array = A.array;
    int l = HEAP_LEFT(i);
    int r = HEAP_RIGHT(i);
    int largest = i;
    int i_value = array[i];

    if ((A.size - 1) >= l && array[largest] < array[l])
      largest = l;
    if ((A.size - 1) >= r && array[largest] < array[r])
      largest = r;

    if (largest != i) {
      array[i] = array[largest];
      array[largest] = i_value;
      max_heapify(A, largest);
    }
  }
#+end_src

As shown in the code above, if one of the nodes are greater than root A[i], they are exchanged and ~max_heapify~ is called recursively with i = child node exchanged.

* Heapsort

The heapsort algorithm sorts an array and relies on max-heaps, a loop takes the root A[0] (largest element of the array) and exchanges with A[i], where i = n - 1 down to 0:

#+begin_src C
  int heapsort(heap A) {
    build_heap(A);
    int root_value;
    for (int i = A.size - 1;i > 0;i--) {
      root_value = A.array[0];
      A.array[0] = A.array[i];
      A.array[i] = root_value;
      A.size--;
      max_heapify(A, 0);
    }
  }
#+end_src

#+DOWNLOADED: screenshot @ 2024-07-17 16:31:22
[[file:Heapsort/2024-07-17_16-31-22_screenshot.png]]
